module namespace dxt = 'http://in.tum.de/basex/modules/manage-back-xml';

(:~ Generates an xml file that contains configuration settings for the
    BaseX management tool.
:)
declare function dxt:gen-deploy-settings() as element() {
  <DeploySettings>
  <!-- The following paths will be used by the run module. -->
    <Run>
      <DbPath></DbPath>
      <RestXQPath></RestXQPath>
      <WebStaticPath></WebStaticPath>
      <RepoPath></RepoPath>
    </Run>

    <!-- The following paths will be used by the exporting mechanism of the component. -->
    <ExportSettings>
      <DbPath></DbPath>
      <RepoPath></RepoPath>
      <WebStaticPath></WebStaticPath>
      <RestXQPath></RestXQPath>
    </ExportSettings>

    <ImportSettings>
      <MaxIntegerSeparator>50</MaxIntegerSeparator>
    </ImportSettings>
  </DeploySettings>
};

declare
function dxt:gen-webapp-listing() as element() {
  <WebAppListing>
  </WebAppListing>
};

(:~ Generates an xml file that contains data about a web application. :)
declare function dxt:gen-app-settings() as element() {
  <WebAppSettings appIdentifier=''>
    <AppState>inactive</AppState>
    <AppName></AppName>
    <Author></Author>
    <EntryUrl></EntryUrl>
    <Databases></Databases>
    <Packages></Packages>
  </WebAppSettings>
};

declare
function dxt:result($result) as element() {
  <Result>
    <Success>true</Success>
    <Contents>{$result}</Contents>
  </Result>
};

declare
function dxt:results($results as element()*) as element() {
  <Results count="{count($results)}">
  {
    for $r in $results return $r
  }
  </Results>
};

(:~ Generates an xml file that will contain errors occured inside function. :)
declare 
function dxt:error($code, $description, $module) as element() {
  <Result>
    <Success>false</Success>
    <Contents>
      <Code>{$code}</Code>
      <Description>{$description}</Description>
      <Module>{$module}</Module>
    </Contents>
  </Result>
};

(:~ Assuming $result is an XML file generated by dxt:result(), and
    its contents is only a string value, then this function returns that
    value as a string. Otherwise it returns an empty string
:)
declare 
function dxt:to-string($result as element()) as xs:string {
  try {
    let $Success := $result//Success
    return if (xs:boolean($Success)) then $result//Contents else "" 
  } catch * {
    ""
  }
};
